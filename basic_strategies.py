# -*- coding: utf-8 -*-
"""MA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1430Cs41M-MaWKYaJnLeoSsqlZdWQ1qBK

# Imports
"""

# imports

# Code to read csv file into Colaboratory:
!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

import pandas as pd
import numpy as np
import random
import matplotlib.pyplot as plt

# IMPORTING DATA

# Shareable link
link = 'https://drive.google.com/open?id=19w_OJfa0tCeBM-gi7xqEuHFsWBaGCPl8'
fluff, id = link.split('=')

downloaded = drive.CreateFile({'id':id}) 
downloaded.GetContentFile('train.csv')  
df_train = pd.read_csv('train.csv')

link = 'https://drive.google.com/open?id=1mwGS9lCJG_V9bTduII0sRrz1K_KVzVxP'
fluff, id = link.split('=')

downloaded = drive.CreateFile({'id':id}) 
downloaded.GetContentFile('validation.csv')  
df_validate = pd.read_csv('validation.csv')

link = 'https://drive.google.com/open?id=1y-6zsEDhuT296HuE-4RVcScA4RU0b4vf'
fluff, id = link.split('=')

downloaded = drive.CreateFile({'id':id}) 
downloaded.GetContentFile('test.csv')  
df_test = pd.read_csv('test.csv')

"""## For Submission

# Problem 2: Basic Bidding Strategies

## Strategy implementations
"""

# TODO
# Need to take into account the floorprice (slot price) ? 
# Calculating budget deduction mistakenly - in the cases where bid is not won I shouldnt be deducting
# Fix deductions for random
# Check what to do in the case of remaining budget.

def get_clicks_const(df_train, est_bidprice):
  """ Calculate number of clicks based on bidprice passed
      
  Args:
      param1 (df): dataframe of dataset to check over
      param2 (int): constant bidprice
  
  Returns: 
      param1 (int): total clicks
      param2 (list): list with click of each advertiser
  """
  # Adding column with 1, 0 indicating if bid accepted or not
  df_train['accepted_bids'] = np.where((est_bidprice >= df_train['payprice']), 1, 0)
  # Filtering out bids not accepted
  is_accepted = df_train['accepted_bids']==1
  df_accepted = df_train[is_accepted]
  # Filter df where sum(payprice) <= budget
  mask_sumBelowBudget = df_accepted['payprice'].cumsum() <= budget
  df_acceptedBudget = df_accepted[mask_sumBelowBudget]
  df_acceptedBudget['paidFor'] = np.where((df_acceptedBudget['click'] == 1), df_acceptedBudget['payprice'], 0)
  total_impressions = len(df_acceptedBudget)
  # Get total clicks
  total_clicks = sum(df_acceptedBudget['click'])  
  CTR = total_clicks/budget
  CPC = -999
#   CPC = sum(df_acceptedBudget.paidFor)/total_clicks # Commenting out for small bids with total clicks with zero gets zero division
  
  return total_clicks, total_impressions, CTR, CPC

def get_clicks_rand(df_train, lower_b, upper_b):
  """ Calculate number of clicks based on range passed
  First get a list of random bid values withing range. Length of the list
  depends on the range give. Then append list to dataframe and exctract number 
  of clicks.
      
  Args:
      param1 (df): dataframe of dataset to check over
      param2 (float): lower bound
      param3 (float): upper bound
  
  Returns: 
      param1 (int): total clicks
      param2 (list): list with click of each advertiser
  """
  # Testing normal distribution
  mean = 0.5*(lower_b+upper_b)
  std = upper_b - mean
#   Normal
#   np_bid = np.random.normal(mean, std, (df_train.shape[0], 1))
  # Uniform
  np_bid = np.random.uniform(lower_b, upper_b, (df_train.shape[0], 1))
  df_train['random_bid'] = np_bid
  df_train['accepted_bids'] = np.where((df_train['random_bid'] >= df_train['payprice']), 1, 0)
  # Filtering out bids not accepted
  is_accepted = df_train['accepted_bids']==1
  df_accepted = df_train[is_accepted]
  # Filter df where sum(payprice) <= budget
  mask_sumBelowBudget = df_accepted['payprice'].cumsum() <= budget
  df_acceptedBudget = df_accepted[mask_sumBelowBudget]
  df_acceptedBudget['paidFor'] = np.where((df_acceptedBudget['click'] == 1), df_acceptedBudget['payprice'], 0)
  total_impressions = len(df_acceptedBudget)
  # Get total clicks
  total_clicks = sum(df_acceptedBudget['click'])  
  CTR = total_clicks/budget
  CPC = sum(df_acceptedBudget.paidFor)/total_clicks 
  CPC = -999
  
  return total_clicks, total_impressions, CTR, CPC

def get_rand_agents(df_train, n, lower_b, upper_b):
  """ Calculate number of clicks based on range passed
  First get a list of random bid values withing range. Length of the list
  depends on the range give. Then append list to dataframe and exctract number 
  of clicks.
      
  Args:
      param1 (df): dataframe of dataset to check over
      param2 (int): number of agents, range [50-100]
      param3 (float): lower bound
      param4 (float): upper bound
  
  Returns: 
      param1 (int): total clicks
      param2 (int): total clicks per agent
      ((param3 (list): list with click of each advertiser)) might not need to include
  """
  # Getting all random bids
  np_bid = np.random.uniform(lower_b, upper_b, (df_train.shape[0], n))
  # Get max bid and respective agent for each ad
  bid_max = np.max(np_bid, axis=1)
  bid_max = np.reshape(bid_max, (len(bid_max), 1)) 
  agent_max = np.argmax(np_bid, axis=1)
  agent_max = np.reshape(agent_max, (len(agent_max), 1))
  
  sorted_asc = np.sort(np_bid, axis=1)
  second_bid = sorted_asc[:,-2]
  df_train['auction_price'] = second_bid
  df_train['PAY_auction_price'] = np.where((df_train['payprice'] >= df_train['auction_price']), df_train['payprice'], df_train['auction_price'])
  df_train['bid_max'] = bid_max
  df_train['agent_max'] = agent_max
  
  df_train['accepted_agents'] = np.where((df_train['bid_max'] >= df_train['PAY_auction_price']), df_train['agent_max'], -1)
  # Filter out impressions not accepted
  is_accepted = df_train['accepted_agents'] != -1
  df_accepted = df_train[is_accepted]
  total_impressions = len(df_accepted)
  # Get bids up to budget reached.
  df_grouped = df_accepted.groupby('accepted_agents')
  mask_sumBelowBudget = df_grouped.cumsum().PAY_auction_price <= budget # 
  df_acceptedBudget = df_accepted[mask_sumBelowBudget]
  # Count total clicks
  total_clicks = sum(df_acceptedBudget.click)
  CTR = total_clicks/budget
  CPC = -999
  
  return total_clicks, total_impressions, CTR, CPC 


def get_rand_agents_2(df_train, n, lower_b, upper_b):
  
  overall_budget = n*budget # Everyone bids in the same range, hence will have an overall avg budget
  
  columns_of_interest = ['click', 'bid_max', 'payprice', 'second', 'auction_price']
  
  np_bid = np.random.uniform(lower_b, upper_b, (df_train.shape[0], n))
  sorted_asc = np.sort(np_bid, axis=1)
  bid_max = sorted_asc[:, -1]
  second = sorted_asc[:,-2]
  df_train['bid_max'] = bid_max
  df_train['second'] = second
  df_train['auction_price'] = np.where((df_train['payprice'] >= df_train['second']), df_train['payprice'], df_train['second'])
  df_train['accepted_bids'] = np.where((df_train['bid_max'] >= df_train['payprice']), 1, 0)  
  is_accepted = df_train['accepted_bids']==1
  df_accepted = df_train[is_accepted]
  # Only take within budget
  mask_sumBelowBudget = df_accepted['payprice'].cumsum() <= overall_budget
  df_acceptedBudget = df_accepted[mask_sumBelowBudget]
  total_impressions = len(df_acceptedBudget)
  total_clicks = sum(df_acceptedBudget['click'])  
  CTR = total_clicks/budget
  CPC = budget/total_clicks
 
  return total_clicks, total_impressions, CTR, CPC 

def get_linear_strategy(df_train, est_bidprice):
  """ Calculate number of clicks based on bidprice passed
      
  Args:
      param1 (df): dataframe of dataset to check over
      param2 (int): constant bidprice
  
  Returns: 
      param1 (int): total clicks
      param2 (list): list with click of each advertiser
  """
  # Adding column with 1, 0 indicating if bid accepted or not
  df_train['est_bi'] = est_bidprice

  df_train['accepted_bids'] = np.where((est_bidprice >= df_train['payprice']), 1, 0)
  # Filtering out bids not accepted
  is_accepted = df_train['accepted_bids']==1
  df_accepted = df_train[is_accepted]
  # Filter df where sum(payprice) <= budget
  mask_sumBelowBudget = df_accepted['payprice'].cumsum() <= budget
  df_acceptedBudget = df_accepted[mask_sumBelowBudget]
  # Get total clicks
  total_clicks = sum(df_acceptedBudget['click'])  
  
  return total_clicks


def plot_results(bid_range_train, bid_range_val, clicks_train, clicks_val):
  if (bid_range_train == bid_range_val):
    max_train = np.max(clicks_train)
    max_val = np.max(clicks_val)
    opt_train = bid_range_train[np.argmax(clicks_train)]
    opt_val = bid_range_val[np.argmax(clicks_val)]
    # Print same x-axis
    plt.title('Total Clicks Constant Bidding for Train and Validation Sets')
    plt.scatter(bid_range_train, clicks_train, c='b', label='Train')
    plt.scatter(bid_range_train, clicks_val, c='r', label='Validation')
    plt.ylabel('Clicks')
    plt.xlabel('Constant bid price')
    plt.legend(loc='upper right')
    plt.show()
  else:
    max_train = np.max(clicks_train)
    max_val = np.max(clicks_val)
    opt_train = bid_range_train[np.argmax(clicks_train)]
    opt_val = bid_range_val[np.argmax(clicks_val)]
    # Print on different x-axis
    plt.title('Total Clicks Constant Bidding (Train): Bid price {} CNY: {} clicks'.format(opt_train, max_train))
    plt.scatter(bid_range_train, clicks_train, c='b', label='Train')
    plt.ylabel('Clicks')
    plt.xlabel('Constant bid price')
    plt.legend(loc='upper right')
    plt.show()
    plt.title('Total Clicks Constant Bidding (Validation): Bid price {} CNY: {} clicks'.format(opt_val, max_val))
    plt.scatter(bid_range_val, clicks_val, c='r', label='Validation')
    plt.ylabel('Clicks')
    plt.xlabel('Constant bid price')
    plt.legend(loc='upper right')
    plt.show()

"""## Constant bidding"""

budget = 6250000
rows, col = df_train.shape

#####################
total_runs = 10
bid_range = [i*5 for i in range(1, 40)] # Uncomment for testing the whole bid ragne
# bid_range = [79] # This is the optimal price

all_runs_train = []
all_runs_val = []
all_runs_total_impressions = []
all_runs_CTR = []
all_runs_CPC = []
for i in range(total_runs):
  # Shuffle dataset
  df_train_shuffled = df_train.sample(frac=1).reset_index(drop=True)
  clicks_train = []
  df_val_shuffled = df_validate.sample(frac=1).reset_index(drop=True)
  clicks_val = []
  total_impressions_l = []
  CTR_l = []
  CPC_l = []
  for bid in bid_range:
    total_train, total_impressions, CTR, CPC = get_clicks_const(df_train_shuffled, bid)
    clicks_train.append(total_train)
    total_val, total_impressions, CTR, CPC = get_clicks_const(df_val_shuffled, bid)
    clicks_val.append(total_val)
    total_impressions_l.append(total_impressions)
    CTR_l.append(CTR)
    CPC_l.append(CPC)
    all_runs_train.append(clicks_train)
  all_runs_val.append(clicks_val)
  all_runs_total_impressions.append(total_impressions_l)
  all_runs_CTR.append(CTR_l)
  all_runs_CPC.append(CPC_l)
  if (i%5 == 0):
    print('Run {}'.format(i))


avg_train = [sum(i)/len(i) for i in zip(*all_runs_train)]
avg_val = [sum(i)/len(i) for i in zip(*all_runs_val)]
avg_impressions = [sum(i)/len(i) for i in zip(*all_runs_total_impressions)]
avg_CTR = [sum(i)/len(i) for i in zip(*all_runs_CTR)]
avg_CPC = [sum(i)/len(i) for i in zip(*all_runs_CPC)]

plot_results(bid_range, bid_range, avg_train, avg_val)


# Training for best performing bids range in increments of 1

# Take range +- 10 for best performing bids
# opt_train = bid_range[np.argmax(clicks_train)]
# opt_val = bid_range[np.argmax(clicks_val)]
# bid_range_train = [i for i in range(opt_train - 10, opt_train + 10)]
# bid_range_val = [i for i in range(opt_val - 10, opt_val + 10)]

# all_runs_train = []
# all_runs_val = []
# for i in range(total_runs):
#   # Shuffle dataset
#   df_train_shuffled = df_train.sample(frac=1).reset_index(drop=True)
#   df_val_shuffled = df_validate.sample(frac=1).reset_index(drop=True)
#   clicks_train = []
#   clicks_val = []
#   for bid in bid_range_train:
#     total_train = get_clicks_const(df_train_shuffled, bid)
#     clicks_train.append(total_train)
#   for bid in bid_range_val:
#     total_val = get_clicks_const(df_val_shuffled, bid)
#     clicks_val.append(total_val)
#   all_runs_train.append(clicks_train)
#   all_runs_val.append(clicks_val)
#   if (i%5 == 0):
#     print('Run {}'.format(i))

# avg_train = [sum(i)/len(i) for i in zip(*all_runs_train)]
# avg_val = [sum(i)/len(i) for i in zip(*all_runs_val)]
# plot_results(bid_range_train, bid_range_val, avg_train, avg_val)

print('CONSTANT')
print('CTR: ', avg_CTR)
print('Clicks: ', avg_val)
print('CPM: NULL')
print('CPC: ', avg_CPC)
print('Impressions:, ', avg_impressions)

"""## Random Bidding"""

# Implementing Grid Search

rand_range = [1, 2, 3, 4]
rand_range = [1] # uncomment for training over all ranges
# For varying rand lengths
best_range_train = [] # list will store range (hi, lo) for each case of gap
best_click_train = [] # storing best performing clicks of each range

best_range_val = [] # list will store range (hi, lo) for each case of gap
best_click_val = [] # storing best performing clicks of each range

low_range = [i*5 for i in range(3, 15)]
high_range = [i*5 for i in range(15, 27)]
total_heat = np.zeros((12, 12))
total_runs = 50
for i in range(total_runs):
  if (i % 5 == 0):
    print(i)
  df_val_shuffled = df_validate.sample(frac=1).reset_index(drop=True)
  curr_heat = np.zeros((12, 12))
  for i in range(12):
    for j in range(12):
      total_val, total_impressions, CTR, CPC = get_clicks_rand(df_val_shuffled, low_range[i], high_range[j])
      curr_heat[i][j] = total_val
  total_heat +=curr_heat

avg_heat = total_heat/total_runs
# plot_results(x_label, x_label, avg_train, avg_val)

import seaborn as sns;
ax = sns.heatmap(avg_heat, xticklabels = low_range, yticklabels = high_range, cmap='bwr_r')
ax.set(xlabel='Lower range bound', ylabel='Upper range bound', title="Random bid price for varying bound ranges")

rand_range = [1, 2, 3, 4]
rand_range = [1] # uncomment for training over all ranges
# For varying rand lengths
best_range_train = [] # list will store range (hi, lo) for each case of gap
best_click_train = [] # storing best performing clicks of each range

best_range_val = [] # list will store range (hi, lo) for each case of gap
best_click_val = [] # storing best performing clicks of each range



for gap in rand_range:
  print("Gap: {}".format(gap*5))
  total_runs = 10
#   bid_range = [(5*i,5*(i+gap)) for i in range(1, 25)] # Uncomment for testing over all ranges
#   bid_range = [(40, 100)] # setting for uniform distribution
  bid_range = [(50, 90)] # setting for normal distribution
  x_label = [i for i in range(1, 25)]

#   all_runs_train = []
  all_runs_total_impressions = []
  all_runs_CTR = []
  all_runs_CPC = []
  all_runs_val = []
  print(bid_range)
  for i in range(total_runs):
    if (i%10 == 0):
      print(i)
    # Shuffle dataset
#     df_train_shuffled = df_train.sample(frac=1).reset_index(drop=True)
    df_val_shuffled = df_validate.sample(frac=1).reset_index(drop=True)

#     clicks_train = []
    clicks_val = []
    total_impressions_l = []
    CTR_l = []
    CPC_l = []
    for low, high in bid_range:

#       total_train = get_clicks_rand(df_train_shuffled, low, high)
#       clicks_train.append(total_train)

      total_val, total_impressions, CTR, CPC = get_clicks_rand(df_val_shuffled, low, high)
      total_impressions_l.append(total_impressions)
      CTR_l.append(CTR)
      CPC_l.append(CPC)
      clicks_val.append(total_val)
#     all_runs_train.append(clicks_train)
    all_runs_val.append(clicks_val)
    all_runs_total_impressions.append(total_impressions_l)
    all_runs_CTR.append(CTR_l)
    all_runs_CPC.append(CPC_l)

#   avg_train = [sum(i)/len(i) for i in zip(*all_runs_train)]
  avg_val = [sum(i)/len(i) for i in zip(*all_runs_val)]
  avg_impressions = [sum(i)/len(i) for i in zip(*all_runs_total_impressions)]
  avg_CTR = [sum(i)/len(i) for i in zip(*all_runs_CTR)]
  avg_CPC = [sum(i)/len(i) for i in zip(*all_runs_CPC)]
  
  # Need to plot these values against each other
#   best_click_train.append(np.max(avg_train))
#   best_click_val.append(np.max(avg_val))
  
#   best_range_train.append(bid_range[np.argmax(best_click_train)])
#   best_range_val.append(bid_range[np.argmax(best_click_val)])
  
#   plot_results(x_label, x_label, avg_train, avg_val)

print('NORMAL Random')
print('CTR: ', avg_CTR)
print('Clicks: ', avg_val)
print('CPM: NULL')
print('CPC: ', avg_CPC)
print('Impressions:, ', avg_impressions)

"""## Random bidding *n* agents"""

# Getting heat map with sum over all n agents

# Implementing Grid Search

rand_range = [1, 2, 3, 4]
rand_range = [1] # uncomment for training over all ranges
# For varying rand lengths
best_range_train = [] # list will store range (hi, lo) for each case of gap
best_click_train = [] # storing best performing clicks of each range

best_range_val = [] # list will store range (hi, lo) for each case of gap
best_click_val = [] # storing best performing clicks of each range

low_range = [i*5 for i in range(38, 50)]
high_range = [i*5 for i in range(50, 62)]
total_heat = np.zeros((12, 12))
total_runs = 1

list_all_info = []
for i in range(total_runs):
  if (i % 5 == 0):
    print(i)
  df_val_shuffled = df_validate.sample(frac=1).reset_index(drop=True)
  curr_heat = np.zeros((12, 12))
  for i in range(12):
    for j in range(12):
      n_agents = []
      for n in range(100, 101):
        total_val, total_impressions, CTR, CPC = get_rand_agents_2(df_val_shuffled, n, low_range[i], high_range[j])
        n_agents.append(total_val)
      list_all_info.append(n_agents)  
      curr_heat[i][j] = sum(n_agents)/len(n_agents)
      
  total_heat +=curr_heat

avg_heat = total_heat/total_runs

#####################
total_runs = 1
# bid_range = [i*5 for i in range(1, 40)] # Uncomment for testing the whole bid ragne
bid_range = [79] # This is the optimal price
low_opt = 40
high_opt = 100

n_val = []
n_impressions = []
n_CTR = []
n_CPC = []
n_agents = [i for i in range(50, 101)]
# n_agents = [50]
for n in n_agents:
  all_runs_val = []
  all_runs_total_impressions = []
  all_runs_CTR = []
  all_runs_CPC = []
  for i in range(total_runs):
    df_val_shuffled = df_validate.sample(frac=1).reset_index(drop=True)
    clicks_val = []
    total_impressions_l = []
    CTR_l = []
    CPC_l = []
    for bid in bid_range:
      total_val, total_impressions, CTR, CPC = get_rand_agents_2(df_val_shuffled, n, low_opt, high_opt)
      clicks_val.append(total_val)
      total_impressions_l.append(total_impressions)
      CTR_l.append(CTR)
      CPC_l.append(CPC)
    all_runs_val.append(clicks_val)
    all_runs_total_impressions.append(total_impressions_l)
    all_runs_CTR.append(CTR_l)
    all_runs_CPC.append(CPC_l)
    if (i%5 == 0):
      print('Run {}'.format(i))

  avg_val = [sum(i)/len(i) for i in zip(*all_runs_val)]
  avg_impressions = [sum(i)/len(i) for i in zip(*all_runs_total_impressions)]
  avg_CTR = [sum(i)/len(i) for i in zip(*all_runs_CTR)]
  avg_CPC = [sum(i)/len(i) for i in zip(*all_runs_CPC)]
  
  n_val.append(avg_val)
  n_impressions.append(avg_impressions)
  n_CTR.append(avg_CTR)
  n_CPC.append(avg_CPC)

# FIND A BEST RANGE FROM ABOVE AND VARY THE NUMBER OF AGENTS
# PLOT AVG PER AGENT vs RANGE

#####
total_runs = 10
bid_range = [(5*i,5*(i+2)) for i in range(1, 15)]
x_label = [i for i in range(1, 15)]
n = 50
n_range = [i for i in range(50, 100)]
max_clicks_n_train = []
max_clicks_n_val = []

# Running for different number of agents
for n in n_range: 
  all_runs_train = []
  all_runs_val = []
  for i in range(total_runs):
    # Shuffle dataset
    df_train_shuffled = df_train.sample(frac=1).reset_index(drop=True)
    df_val_shuffled = df_validate.sample(frac=1).reset_index(drop=True)

    clicks_train = []
    clicks_val = []
    for low, high in bid_range:
      total_train, dict_train = get_rand_agents(df_train_shuffled, n, low, high)
      total_val, dict_val = get_ran_agents(df_val_shuffled, n, low, high) 
      clicks_train.append(total_train)
      clicks_val.append(total_val)
    all_runs_train.append(clicks_train)
    all_runs_val.append(clicks_val)
    if (i%5 == 0):
      print('Run {}'.format(i))

  avg_train = [sum(i)/len(i) for i in zip(*all_runs_train)]
  avg_val = [sum(i)/len(i) for i in zip(*all_runs_val)]
  
  max_clicks_n_train.append(np.max(avg_train))
  max_clicks_n_val.append(np.max(avg_val))
  
  plot_results(x_label, x_label, avg_train, avg_val)
  
plot_results(n_range, n_range, max_clicks_train, max_clicks_val)