# -*- coding: utf-8 -*-
"""part2_multi_agent.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PPYcWEtCLLAAh-a0ghD8z6YrSaF_V-Ks
"""

# imports

import numpy as np
import pandas as pd
from google.colab import files, drive
import heapq
drive.mount('/content/drive')

# Importing data
filevalidy ='/content/drive/My Drive/Multi-Agent/we_data/valid_processed_y.csv'

from sklearn.externals import joblib

valid_bid_y = joblib.load(filevalidy)

bids = pd.read_csv('/content/drive/My Drive/Multi-Agent/we_data/ensemble_bids.csv')
# bids = bids.drop(columns=['click'])

# Calculate weighted performance from multi-agent setting

comp_weights = np.array([0.0000001,28,139,35])
comp_weights = comp_weights/np.sum(comp_weights)
comp_log_weights = np.log(comp_weights/(1-comp_weights)) +25
comp_log_weights = comp_log_weights/np.sum(comp_log_weights)

# Calculate solo performance from Criterion 1
solo_weights = np.array([112,112,156,99])
solo_weights = solo_weights/np.sum(solo_weights)
solo_log_weights = np.log(solo_weights/(1-solo_weights))+2
solo_log_weights = solo_log_weights/np.sum(solo_log_weights)
print(solo_weights)
print(solo_log_weights)

# Merge bids
Merge_bids = (bids*comp_weights).sum(axis= 1)

# Weighted average test
budget = 0
wins_1 = 0
cc = 0
clicks_1 = 0
for i in range(len(Merge_bids)):
  if Merge_bids[i] > valid_bid_y['payprice'].values[i]:
    wins_1 +=1
    if valid_bid_y['click'].values[i] == 1:
      clicks_1 += valid_bid_y['click'].values[i]
      cc += valid_bid_y['payprice'].values[i]
    budget += valid_bid_y['payprice'].values[i]
  if budget >= 6250000:
    break

CTR = clicks_1/float(len(Merge_bids))
CPM = budget/float(len(Merge_bids))
CPC = cc/clicks_1
spent = budget
# print("Merge: wining bids: %f  clicks: %f  spent: %f  avgCTR: %f  avgCPM: %f  avgCPC: %f"%(wins_1,clicks_1,spent, CTR, CPM, CPC))

# Sample random Strategy test
budget = 0
wins_1 = 0
cc = 0
clicks_1 = 0
for i in range(len(Merge_bids)):
  bid = np.random.choice(bids.iloc[i],p = solo_weights)
  if bid > valid_bid_y['payprice'].values[i]:
    wins_1 +=1
    if valid_bid_y['click'].values[i] == 1:
      clicks_1 += valid_bid_y['click'].values[i]
      cc += valid_bid_y['payprice'].values[i]
    budget += valid_bid_y['payprice'].values[i]
  if budget >= 6250000:
    break

CTR = clicks_1/float(len(Merge_bids))
CPM = budget/float(len(Merge_bids))
CPC = cc/clicks_1
spent = budget
# print("Merge: wining bids: %f  clicks: %f  spent: %f  avgCTR: %f  avgCPM: %f  avgCPC: %f"%(wins_1,clicks_1,spent, CTR, CPM, CPC))

